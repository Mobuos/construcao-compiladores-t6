# Generated from antlr/minecraftCommands.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,34,278,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,
        1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,
        1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
        1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,5,
        13,144,8,13,10,13,12,13,147,9,13,1,13,1,13,1,14,1,14,5,14,153,8,
        14,10,14,12,14,156,9,14,1,14,1,14,1,15,4,15,161,8,15,11,15,12,15,
        162,1,16,4,16,166,8,16,11,16,12,16,167,1,16,1,16,4,16,172,8,16,11,
        16,12,16,173,3,16,176,8,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,
        19,1,19,1,19,1,19,3,19,189,8,19,1,20,1,20,1,20,1,20,5,20,195,8,20,
        10,20,12,20,198,9,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
        1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
        3,22,222,8,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,
        1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
        1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,
        1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,5,32,
        272,8,32,10,32,12,32,275,9,32,1,33,1,33,2,154,196,0,34,1,1,3,2,5,
        3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
        53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,1,0,6,2,0,10,10,
        34,34,3,0,48,57,65,70,97,102,3,0,9,10,13,13,32,32,1,0,10,10,2,0,
        65,90,97,122,4,0,48,57,65,90,95,95,97,122,288,0,1,1,0,0,0,0,3,1,
        0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
        0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
        0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,
        0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,
        0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,
        0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,
        0,0,0,65,1,0,0,0,0,67,1,0,0,0,1,69,1,0,0,0,3,71,1,0,0,0,5,73,1,0,
        0,0,7,87,1,0,0,0,9,89,1,0,0,0,11,91,1,0,0,0,13,96,1,0,0,0,15,101,
        1,0,0,0,17,113,1,0,0,0,19,119,1,0,0,0,21,132,1,0,0,0,23,137,1,0,
        0,0,25,139,1,0,0,0,27,141,1,0,0,0,29,150,1,0,0,0,31,160,1,0,0,0,
        33,165,1,0,0,0,35,177,1,0,0,0,37,181,1,0,0,0,39,188,1,0,0,0,41,190,
        1,0,0,0,43,201,1,0,0,0,45,221,1,0,0,0,47,223,1,0,0,0,49,232,1,0,
        0,0,51,246,1,0,0,0,53,256,1,0,0,0,55,259,1,0,0,0,57,261,1,0,0,0,
        59,263,1,0,0,0,61,265,1,0,0,0,63,267,1,0,0,0,65,269,1,0,0,0,67,276,
        1,0,0,0,69,70,5,40,0,0,70,2,1,0,0,0,71,72,5,41,0,0,72,4,1,0,0,0,
        73,74,5,101,0,0,74,75,5,110,0,0,75,76,5,99,0,0,76,77,5,97,0,0,77,
        78,5,110,0,0,78,79,5,116,0,0,79,80,5,97,0,0,80,81,5,109,0,0,81,82,
        5,101,0,0,82,83,5,110,0,0,83,84,5,116,0,0,84,85,5,111,0,0,85,86,
        5,115,0,0,86,6,1,0,0,0,87,88,5,91,0,0,88,8,1,0,0,0,89,90,5,93,0,
        0,90,10,1,0,0,0,91,92,5,110,0,0,92,93,5,111,0,0,93,94,5,109,0,0,
        94,95,5,101,0,0,95,12,1,0,0,0,96,97,5,108,0,0,97,98,5,111,0,0,98,
        99,5,114,0,0,99,100,5,101,0,0,100,14,1,0,0,0,101,102,5,105,0,0,102,
        103,5,110,0,0,103,104,5,113,0,0,104,105,5,117,0,0,105,106,5,101,
        0,0,106,107,5,98,0,0,107,108,5,114,0,0,108,109,5,97,0,0,109,110,
        5,118,0,0,110,111,5,101,0,0,111,112,5,108,0,0,112,16,1,0,0,0,113,
        114,5,115,0,0,114,115,5,101,0,0,115,116,5,109,0,0,116,117,5,73,0,
        0,117,118,5,65,0,0,118,18,1,0,0,0,119,120,5,105,0,0,120,121,5,110,
        0,0,121,122,5,118,0,0,122,123,5,117,0,0,123,124,5,108,0,0,124,125,
        5,110,0,0,125,126,5,101,0,0,126,127,5,114,0,0,127,128,5,97,0,0,128,
        129,5,118,0,0,129,130,5,101,0,0,130,131,5,108,0,0,131,20,1,0,0,0,
        132,133,5,118,0,0,133,134,5,105,0,0,134,135,5,100,0,0,135,136,5,
        97,0,0,136,22,1,0,0,0,137,138,5,123,0,0,138,24,1,0,0,0,139,140,5,
        125,0,0,140,26,1,0,0,0,141,145,5,34,0,0,142,144,8,0,0,0,143,142,
        1,0,0,0,144,147,1,0,0,0,145,143,1,0,0,0,145,146,1,0,0,0,146,148,
        1,0,0,0,147,145,1,0,0,0,148,149,5,34,0,0,149,28,1,0,0,0,150,154,
        5,34,0,0,151,153,8,0,0,0,152,151,1,0,0,0,153,156,1,0,0,0,154,155,
        1,0,0,0,154,152,1,0,0,0,155,157,1,0,0,0,156,154,1,0,0,0,157,158,
        5,59,0,0,158,30,1,0,0,0,159,161,2,48,57,0,160,159,1,0,0,0,161,162,
        1,0,0,0,162,160,1,0,0,0,162,163,1,0,0,0,163,32,1,0,0,0,164,166,2,
        48,57,0,165,164,1,0,0,0,166,167,1,0,0,0,167,165,1,0,0,0,167,168,
        1,0,0,0,168,175,1,0,0,0,169,171,5,46,0,0,170,172,2,48,57,0,171,170,
        1,0,0,0,172,173,1,0,0,0,173,171,1,0,0,0,173,174,1,0,0,0,174,176,
        1,0,0,0,175,169,1,0,0,0,175,176,1,0,0,0,176,34,1,0,0,0,177,178,5,
        35,0,0,178,179,7,1,0,0,179,180,6,17,0,0,180,36,1,0,0,0,181,182,7,
        2,0,0,182,183,6,18,1,0,183,38,1,0,0,0,184,189,5,126,0,0,185,189,
        3,33,16,0,186,187,5,126,0,0,187,189,3,33,16,0,188,184,1,0,0,0,188,
        185,1,0,0,0,188,186,1,0,0,0,189,40,1,0,0,0,190,191,5,47,0,0,191,
        192,5,47,0,0,192,196,1,0,0,0,193,195,8,3,0,0,194,193,1,0,0,0,195,
        198,1,0,0,0,196,197,1,0,0,0,196,194,1,0,0,0,197,199,1,0,0,0,198,
        196,1,0,0,0,199,200,6,20,2,0,200,42,1,0,0,0,201,202,5,100,0,0,202,
        203,5,97,0,0,203,204,5,114,0,0,204,205,5,95,0,0,205,206,5,105,0,
        0,206,207,5,116,0,0,207,208,5,101,0,0,208,209,5,109,0,0,209,44,1,
        0,0,0,210,211,5,116,0,0,211,212,5,101,0,0,212,213,5,108,0,0,213,
        214,5,101,0,0,214,215,5,112,0,0,215,216,5,111,0,0,216,217,5,114,
        0,0,217,218,5,116,0,0,218,222,5,101,0,0,219,220,5,116,0,0,220,222,
        5,112,0,0,221,210,1,0,0,0,221,219,1,0,0,0,222,46,1,0,0,0,223,224,
        5,101,0,0,224,225,5,110,0,0,225,226,5,99,0,0,226,227,5,97,0,0,227,
        228,5,110,0,0,228,229,5,116,0,0,229,230,5,97,0,0,230,231,5,114,0,
        0,231,48,1,0,0,0,232,233,5,99,0,0,233,234,5,114,0,0,234,235,5,105,
        0,0,235,236,5,97,0,0,236,237,5,114,0,0,237,238,5,95,0,0,238,239,
        5,109,0,0,239,240,5,111,0,0,240,241,5,110,0,0,241,242,5,115,0,0,
        242,243,5,116,0,0,243,244,5,114,0,0,244,245,5,111,0,0,245,50,1,0,
        0,0,246,247,5,99,0,0,247,248,5,111,0,0,248,249,5,110,0,0,249,250,
        5,113,0,0,250,251,5,117,0,0,251,252,5,105,0,0,252,253,5,115,0,0,
        253,254,5,116,0,0,254,255,5,97,0,0,255,52,1,0,0,0,256,257,5,45,0,
        0,257,258,5,62,0,0,258,54,1,0,0,0,259,260,5,61,0,0,260,56,1,0,0,
        0,261,262,5,45,0,0,262,58,1,0,0,0,263,264,5,58,0,0,264,60,1,0,0,
        0,265,266,5,44,0,0,266,62,1,0,0,0,267,268,5,59,0,0,268,64,1,0,0,
        0,269,273,7,4,0,0,270,272,7,5,0,0,271,270,1,0,0,0,272,275,1,0,0,
        0,273,271,1,0,0,0,273,274,1,0,0,0,274,66,1,0,0,0,275,273,1,0,0,0,
        276,277,9,0,0,0,277,68,1,0,0,0,11,0,145,154,162,167,173,175,188,
        196,221,273,3,1,17,0,1,18,1,1,20,2
    ]

class minecraftCommandsLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    STRING = 14
    CADEIA_N_FECHADA = 15
    NUM_INT = 16
    NUM_REAL = 17
    COR_HEX = 18
    WS = 19
    COORDENADA_TERMO = 20
    COMENTARIO = 21
    DAR_ITEM = 22
    TELEPORTE = 23
    ENCANTAR = 24
    CRIAR_MONSTRO = 25
    CONQUISTA = 26
    ALVO = 27
    ATRIBUICAO = 28
    NEGACAO = 29
    SEPARADOR_COMANDO = 30
    VIRGULA = 31
    FIM_COMANDO = 32
    IDENT = 33
    ERRO = 34

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'encantamentos'", "'['", "']'", "'nome'", "'lore'", 
            "'inquebravel'", "'semIA'", "'invulneravel'", "'vida'", "'{'", 
            "'}'", "'dar_item'", "'encantar'", "'criar_monstro'", "'conquista'", 
            "'->'", "'='", "'-'", "':'", "','", "';'" ]

    symbolicNames = [ "<INVALID>",
            "STRING", "CADEIA_N_FECHADA", "NUM_INT", "NUM_REAL", "COR_HEX", 
            "WS", "COORDENADA_TERMO", "COMENTARIO", "DAR_ITEM", "TELEPORTE", 
            "ENCANTAR", "CRIAR_MONSTRO", "CONQUISTA", "ALVO", "ATRIBUICAO", 
            "NEGACAO", "SEPARADOR_COMANDO", "VIRGULA", "FIM_COMANDO", "IDENT", 
            "ERRO" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "STRING", 
                  "CADEIA_N_FECHADA", "NUM_INT", "NUM_REAL", "COR_HEX", 
                  "WS", "COORDENADA_TERMO", "COMENTARIO", "DAR_ITEM", "TELEPORTE", 
                  "ENCANTAR", "CRIAR_MONSTRO", "CONQUISTA", "ALVO", "ATRIBUICAO", 
                  "NEGACAO", "SEPARADOR_COMANDO", "VIRGULA", "FIM_COMANDO", 
                  "IDENT", "ERRO" ]

    grammarFileName = "minecraftCommands.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[17] = self.COR_HEX_action 
            actions[18] = self.WS_action 
            actions[20] = self.COMENTARIO_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def COR_HEX_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            6
     

    def WS_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            self.skip()
     

    def COMENTARIO_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
            self.skip()
     


